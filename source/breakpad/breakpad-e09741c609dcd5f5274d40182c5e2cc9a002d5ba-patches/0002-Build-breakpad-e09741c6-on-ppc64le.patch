diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/dump_writer_common/raw_context_cpu.h breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/dump_writer_common/raw_context_cpu.h
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/dump_writer_common/raw_context_cpu.h	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/dump_writer_common/raw_context_cpu.h	2022-04-12 15:18:16.616453509 -0700
@@ -44,6 +44,13 @@
 typedef MDRawContextARM64_Old RawContextCPU;
 #elif defined(__mips__)
 typedef MDRawContextMIPS RawContextCPU;
+#elif defined(__PPC64__)
+/* Most of the PPC-specific changes in breakpad's source code are referred from
+        Commit - https://github.com/ibmsoe/phantomjs/commit/2867533b02b6407523deb0c603673142c3f8c1b1
+        Repo - https://github.com/ibmsoe/phantomjs
+        Done by - Ayappan P (github_id: ayappanec)
+*/
+typedef MDRawContextPPC RawContextCPU;
 #else
 #error "This code has not been ported to your platform yet."
 #endif
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/dump_writer_common/thread_info.cc breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/dump_writer_common/thread_info.cc
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/dump_writer_common/thread_info.cc	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/dump_writer_common/thread_info.cc	2022-04-12 15:18:16.616453509 -0700
@@ -270,7 +270,26 @@
   out->float_save.fir = mcontext.fpc_eir;
 #endif
 }
-#endif  // __mips__
+#elif defined (__PPC__)
+
+uintptr_t ThreadInfo::GetInstructionPointer() const {
+  return regs.nip;
+}
+void ThreadInfo::FillCPUContext(RawContextCPU* out ) const {
+  out->context_flags = MD_CONTEXT_PPC_FULL;
+
+  for (int i = 0; i < MD_CONTEXT_PPC64_GPR_COUNT; ++i)
+    out->gpr[i] = regs.gpr[i];
+
+  out->srr0 = regs.nip;
+  out->srr1 = regs.msr;
+  out->cr = regs.ccr;
+  out->xer = regs.xer;
+  out->lr = regs.link;
+  out->ctr = regs.ctr;
+
+}
+#endif  // __PPC___
 
 void ThreadInfo::GetGeneralPurposeRegisters(void** gp_regs, size_t* size) {
   assert(gp_regs || size);
@@ -294,6 +313,11 @@
     *fp_regs = &mcontext.fpregs;
   if (size)
     *size = sizeof(mcontext.fpregs);
+#elif defined(__PPC64__)
+  if (fp_regs)
+    *fp_regs = &regs;
+  if (size)
+    *size = sizeof(regs);
 #else
   if (fp_regs)
     *fp_regs = &fpregs;
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/dump_writer_common/thread_info.h breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/dump_writer_common/thread_info.h
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/dump_writer_common/thread_info.h	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/dump_writer_common/thread_info.h	2022-04-12 15:18:16.616453509 -0700
@@ -71,6 +71,8 @@
 #elif defined(__mips__)
   // Use the structure defined in <sys/ucontext.h>.
   mcontext_t mcontext;
+#elif defined(__PPC__)
+  struct pt_regs regs;
 #endif
 
   // Returns the instruction pointer (platform-dependent impl.).
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/dump_writer_common/ucontext_reader.cc breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/dump_writer_common/ucontext_reader.cc
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/dump_writer_common/ucontext_reader.cc	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/dump_writer_common/ucontext_reader.cc	2022-04-12 15:18:16.616453509 -0700
@@ -254,6 +254,34 @@
   out->float_save.fir = uc->uc_mcontext.fpc_eir;  // Unused.
 #endif
 }
+#elif defined(__PPC64__)
+
+  uintptr_t UContextReader::GetStackPointer(const struct ucontext* uc) {
+  return uc->uc_mcontext.regs->gpr[1];
+  }
+
+  uintptr_t UContextReader::GetInstructionPointer(const struct ucontext* uc) {
+  return uc->uc_mcontext.regs->nip;
+  }
+
+  void UContextReader::FillCPUContext(RawContextCPU *out, const ucontext *uc,
+                                      const struct _libc_fpstate* fpregs) {
+  typedef unsigned long greg_t;
+  const greg_t* regs = uc->uc_mcontext.gp_regs;
+
+  out->context_flags = MD_CONTEXT_PPC_FULL;
+
+  for (int i = 0; i < MD_CONTEXT_PPC64_GPR_COUNT; ++i)
+       out->gpr[i] = regs[i];
+
+  out->vrsave = uc->uc_mcontext.v_regs->vrsave;
+
+  for (int i = 0; i < MD_FLOATINGSAVEAREA_PPC_FPR_COUNT; ++i)
+       out->float_save.fpregs[i] = fpregs->fpregs[i];
+
+  out->float_save.fpscr = fpregs->fpscr;
+}
+
 #endif
 
 }  // namespace google_breakpad
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/dump_writer_common/ucontext_reader.h breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/dump_writer_common/ucontext_reader.h
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/dump_writer_common/ucontext_reader.h	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/dump_writer_common/ucontext_reader.h	2022-04-12 15:18:16.616453509 -0700
@@ -38,6 +38,15 @@
 #include "common/memory_allocator.h"
 #include "google_breakpad/common/minidump_format.h"
 
+#if defined(__PPC__)
+struct _libc_fpstate
+  {
+        double fpregs[32];
+        double fpscr;
+        unsigned int _pad[2];
+  };
+#endif
+
 namespace google_breakpad {
 
 // Wraps platform-dependent implementations of accessors to ucontext_t structs.
@@ -55,6 +64,9 @@
 #elif defined(__aarch64__)
   static void FillCPUContext(RawContextCPU* out, const ucontext_t* uc,
                              const struct fpsimd_context* fpregs);
+#elif defined(__PPC__)
+  static void FillCPUContext(RawContextCPU *out, const ucontext *uc,
+                             const struct _libc_fpstate* fpregs_);
 #else
   static void FillCPUContext(RawContextCPU* out, const ucontext_t* uc);
 #endif
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/handler/exception_handler.cc breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/handler/exception_handler.cc
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/handler/exception_handler.cc	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/handler/exception_handler.cc	2022-04-12 15:18:16.616453509 -0700
@@ -466,10 +466,17 @@
   // In case of MIPS Linux FP state is already part of ucontext_t
   // and 'float_state' is not a member of CrashContext.
   ucontext_t* uc_ptr = (ucontext_t*)uc;
-  if (uc_ptr->uc_mcontext.fpregs) {
-    memcpy(&g_crash_context_.float_state, uc_ptr->uc_mcontext.fpregs,
-           sizeof(g_crash_context_.float_state));
-  }
+  #if defined(__PPC64__)
+    if (uc_ptr->uc_mcontext.fp_regs) {
+      memcpy(&g_crash_context_.float_state, uc_ptr->uc_mcontext.fp_regs,
+             sizeof(g_crash_context_.float_state));
+    }
+  #else
+    if (uc_ptr->uc_mcontext.fpregs) {
+      memcpy(&g_crash_context_.float_state, uc_ptr->uc_mcontext.fpregs,
+             sizeof(g_crash_context_.float_state));
+    }
+  #endif
 #endif
   g_crash_context_.tid = syscall(__NR_gettid);
   if (crash_handler_ != NULL) {
@@ -703,8 +710,13 @@
 
 #if !defined(__ARM_EABI__) && !defined(__aarch64__) && !defined(__mips__)
   // FPU state is not part of ARM EABI ucontext_t.
-  memcpy(&context.float_state, context.context.uc_mcontext.fpregs,
+  #if defined(__PPC64__)
+    memcpy(&context.float_state, context.context.uc_mcontext.fp_regs,
+           sizeof(context.float_state));
+  #else
+    memcpy(&context.float_state, context.context.uc_mcontext.fpregs,
          sizeof(context.float_state));
+  #endif
 #endif
   context.tid = sys_gettid();
 
@@ -726,6 +738,9 @@
 #elif defined(__mips__)
   context.siginfo.si_addr =
       reinterpret_cast<void*>(context.context.uc_mcontext.pc);
+#elif defined(__PPC64__)
+  context.siginfo.si_addr =
+      reinterpret_cast<void*>(context.context.uc_mcontext.gp_regs[PT_NIP]);
 #else
 #error "This code has not been ported to your platform yet."
 #endif
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/handler/exception_handler.h breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/handler/exception_handler.h
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/handler/exception_handler.h	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/handler/exception_handler.h	2022-04-12 15:18:16.616453509 -0700
@@ -196,7 +196,17 @@
     // #ifdef this out because FP state is not part of user ABI for Linux ARM.
     // In case of MIPS Linux FP state is already part of ucontext_t so
     // 'float_state' is not required.
-    fpstate_t float_state;
+    #if defined(__PPC__)
+       struct _libc_fpstate
+       {
+          double fpregs[32];
+           double fpscr;
+           unsigned int _pad[2];
+       };
+       struct _libc_fpstate float_state;
+    #else
+       fpstate_t float_state;
+    #endif
 #endif
   };
 
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/microdump_writer/microdump_writer.cc breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/microdump_writer/microdump_writer.cc
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/microdump_writer/microdump_writer.cc	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/microdump_writer/microdump_writer.cc	2022-04-12 15:18:16.616453509 -0700
@@ -138,7 +138,7 @@
                   const MicrodumpExtraInfo& microdump_extra_info,
                   LinuxDumper* dumper)
       : ucontext_(context ? &context->context : NULL),
-#if !defined(__ARM_EABI__) && !defined(__mips__)
+#if !defined(__ARM_EABI__) && !defined(__mips__) && !defined(__PPC__)
         float_state_(context ? &context->float_state : NULL),
 #endif
         dumper_(dumper),
@@ -337,6 +337,8 @@
 # else
 #  error "This mips ABI is currently not supported (n32)"
 #endif
+#elif defined(__PPC__)
+    const char kArch[] = "ppc";
 #else
 #error "This code has not been ported to your platform yet"
 #endif
@@ -605,8 +607,10 @@
   void* Alloc(unsigned bytes) { return dumper_->allocator()->Alloc(bytes); }
 
   const ucontext_t* const ucontext_;
-#if !defined(__ARM_EABI__) && !defined(__mips__)
+#if !defined(__ARM_EABI__) && !defined(__mips__) && !defined(__PPC__)
   const google_breakpad::fpstate_t* const float_state_;
+#elif defined(__PPC__)
+  const _libc_fpstate* const float_state_ = NULL;
 #endif
   LinuxDumper* dumper_;
   const MappingList& mapping_list_;
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/minidump_writer/linux_core_dumper.cc breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/minidump_writer/linux_core_dumper.cc
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/minidump_writer/linux_core_dumper.cc	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/minidump_writer/linux_core_dumper.cc	2022-04-12 15:18:16.616453509 -0700
@@ -112,6 +112,8 @@
 #elif defined(__mips__)
   stack_pointer =
       reinterpret_cast<uint8_t*>(info->mcontext.gregs[MD_CONTEXT_MIPS_REG_SP]);
+#elif defined(__PPC__)
+  memcpy(&stack_pointer, &info->regs.gpr[1], sizeof(info->regs.gpr[1]));
 #else
 #error "This code hasn't been ported to your platform yet."
 #endif
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/minidump_writer/linux_dumper.h breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/minidump_writer/linux_dumper.h
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/minidump_writer/linux_dumper.h	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/minidump_writer/linux_dumper.h	2022-04-12 15:18:16.616453509 -0700
@@ -62,7 +62,7 @@
 #if defined(__i386) || defined(__ARM_EABI__) || \
  (defined(__mips__) && _MIPS_SIM == _ABIO32)
 typedef Elf32_auxv_t elf_aux_entry;
-#elif defined(__x86_64) || defined(__aarch64__) || \
+#elif defined(__x86_64) || defined(__aarch64__) || defined(__PPC64__) ||\
      (defined(__mips__) && _MIPS_SIM != _ABIO32)
 typedef Elf64_auxv_t elf_aux_entry;
 #endif
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/minidump_writer/linux_dumper_unittest_helper.cc breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/minidump_writer/linux_dumper_unittest_helper.cc
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/minidump_writer/linux_dumper_unittest_helper.cc	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/minidump_writer/linux_dumper_unittest_helper.cc	2022-04-12 15:18:16.616453509 -0700
@@ -41,7 +41,7 @@
 #include "common/scoped_ptr.h"
 #include "third_party/lss/linux_syscall_support.h"
 
-#if defined(__ARM_EABI__)
+#if defined(__ARM_EABI__) || defined(__PPC__)
 #define TID_PTR_REGISTER "r3"
 #elif defined(__aarch64__)
 #define TID_PTR_REGISTER "x3"
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/minidump_writer/linux_ptrace_dumper.cc breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/minidump_writer/linux_ptrace_dumper.cc
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/minidump_writer/linux_ptrace_dumper.cc	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/minidump_writer/linux_ptrace_dumper.cc	2022-04-12 15:18:16.616453509 -0700
@@ -298,6 +298,8 @@
 #elif defined(__mips__)
   stack_pointer =
       reinterpret_cast<uint8_t*>(info->mcontext.gregs[MD_CONTEXT_MIPS_REG_SP]);
+#elif defined(__PPC__)
+  memcpy(&stack_pointer, &info->regs.gpr[1], sizeof(info->regs.gpr[1]));
 #else
 #error "This code hasn't been ported to your platform yet."
 #endif
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/minidump_writer/linux_ptrace_dumper_unittest.cc breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/minidump_writer/linux_ptrace_dumper_unittest.cc
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/minidump_writer/linux_ptrace_dumper_unittest.cc	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/minidump_writer/linux_ptrace_dumper_unittest.cc	2022-04-12 15:18:16.616453509 -0700
@@ -464,6 +464,8 @@
 #elif defined(__mips__)
     pid_t* process_tid_location =
         reinterpret_cast<pid_t*>(one_thread.mcontext.gregs[1]);
+#elif defined(__PPC__)
+    pid_t* process_tid_location = (pid_t*)(one_thread.regs.gpr[3]);
 #else
 #error This test has not been ported to this platform.
 #endif
@@ -561,6 +563,8 @@
   uintptr_t heap_addr = thread_info.regs.rcx;
 #elif defined(__mips__)
   uintptr_t heap_addr = thread_info.mcontext.gregs[1];
+#elif defined(__PPC__)
+  uintptr_t heap_addr = thread_info.regs.gpr[3];
 #else
 #error This test has not been ported to this platform.
 #endif
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/minidump_writer/minidump_writer.cc breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/minidump_writer/minidump_writer.cc
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/minidump_writer/minidump_writer.cc	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/minidump_writer/minidump_writer.cc	2022-04-12 15:20:27.077948910 -0700
@@ -136,7 +136,7 @@
       : fd_(minidump_fd),
         path_(minidump_path),
         ucontext_(context ? &context->context : NULL),
-#if !defined(__ARM_EABI__) && !defined(__mips__)
+#if !defined(__ARM_EABI__) && !defined(__mips__) && !defined(__PPC__)
         float_state_(context ? &context->float_state : NULL),
 #endif
         dumper_(dumper),
@@ -997,7 +997,7 @@
     }
     return true;
   }
-#elif defined(__arm__) || defined(__aarch64__)
+#elif defined(__arm__) || defined(__aarch64__) || defined(__PPC__)
   bool WriteCPUInformation(MDRawSystemInfo* sys_info) {
     // The CPUID value is broken up in several entries in /proc/cpuinfo.
     // This table is used to rebuild it from the entries.
@@ -1049,6 +1049,8 @@
     sys_info->processor_architecture =
 #if defined(__aarch64__)
         MD_CPU_ARCHITECTURE_ARM64_OLD;
+#elif defined(__PPC__)
+        MD_CPU_ARCHITECTURE_PCC;
 #else
         MD_CPU_ARCHITECTURE_ARM;
 #endif
@@ -1334,7 +1336,11 @@
 
   const ucontext_t* const ucontext_;  // also from the signal handler
 #if !defined(__ARM_EABI__) && !defined(__mips__)
-  const google_breakpad::fpstate_t* const float_state_;  // ditto
+    #if defined(__PPC__)
+        const struct _libc_fpstate* const float_state_=NULL;
+    #else
+        const google_breakpad::fpstate_t* const float_state_;  // ditto
+    #endif
 #endif
   LinuxDumper* dumper_;
   MinidumpFileWriter minidump_writer_;
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/minidump_writer/minidump_writer.h breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/minidump_writer/minidump_writer.h
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/minidump_writer/minidump_writer.h	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/minidump_writer/minidump_writer.h	2022-04-12 15:21:07.314410680 -0700
@@ -48,7 +48,7 @@
 
 #if defined(__aarch64__)
 typedef struct fpsimd_context fpstate_t;
-#elif !defined(__ARM_EABI__) && !defined(__mips__)
+#elif !defined(__ARM_EABI__) && !defined(__mips__) && !defined(__PPC__)
 typedef std::remove_pointer<fpregset_t>::type fpstate_t;
 #endif
 
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/minidump_writer/minidump_writer_unittest.cc breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/minidump_writer/minidump_writer_unittest.cc
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/client/linux/minidump_writer/minidump_writer_unittest.cc	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/client/linux/minidump_writer/minidump_writer_unittest.cc	2022-04-12 15:18:16.616453509 -0700
@@ -717,6 +717,8 @@
 #elif defined(__mips__)
   context.context.uc_mcontext.gregs[MD_CONTEXT_MIPS_REG_SP] =
       invalid_stack_pointer;
+#elif defined(__PPC__)
+  context.context.uc_mcontext.regs->gpr[1] = invalid_stack_pointer;
 #else
 # error "This code has not been ported to your platform yet."
 #endif
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/third_party/lss/linux_syscall_support.h breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/third_party/lss/linux_syscall_support.h
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/third_party/lss/linux_syscall_support.h	2021-04-12 08:24:36.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/third_party/lss/linux_syscall_support.h	2022-04-12 15:21:59.987015519 -0700
@@ -89,7 +89,7 @@
 #if (defined(__i386__) || defined(__x86_64__) || defined(__ARM_ARCH_3__) ||   \
      defined(__mips__) || defined(__PPC__) || defined(__ARM_EABI__) || \
      defined(__aarch64__) || defined(__s390__) || defined(__e2k__))  \
-  && (defined(__linux) || defined(__ANDROID__))
+  && (defined(__linux__) || defined(__ANDROID__))
 
 #ifndef SYS_CPLUSPLUS
 #ifdef __cplusplus
@@ -1593,6 +1593,9 @@
 #ifndef __NR_pwrite64
 #define __NR_pwrite64           180
 #endif
+#ifndef __NR_mmap2
+#define __NR_mmap2              192
+#endif
 #ifndef __NR_ugetrlimit
 #define __NR_ugetrlimit         190
 #endif
diff -Naur breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/tools/linux/md2core/minidump-2-core.cc breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/tools/linux/md2core/minidump-2-core.cc
--- breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba/src/tools/linux/md2core/minidump-2-core.cc	2022-03-29 16:51:59.000000000 -0700
+++ breakpad-e09741c609dcd5f5274d40182c5e2cc9a002d5ba-new/src/tools/linux/md2core/minidump-2-core.cc	2022-04-12 15:18:16.620453556 -0700
@@ -249,7 +249,11 @@
   elf_timeval    pr_stime;      /* System time                               */
   elf_timeval    pr_cutime;     /* Cumulative user time                      */
   elf_timeval    pr_cstime;     /* Cumulative system time                    */
+#if defined(__PPC__)
+  pt_regs pr_reg;		/*CPU registers for ppc64le		     */	
+#else
   user_regs_struct pr_reg;      /* CPU registers                             */
+#endif
   uint32_t       pr_fpvalid;    /* True if math co-processor being used      */
 } prstatus;
 
@@ -308,6 +312,8 @@
     pid_t tid;
 #if defined(__mips__)
     mcontext_t mcontext;
+#elif defined(__PPC__)
+    pt_regs regs;
 #else
     user_regs_struct regs;
 #endif
@@ -533,6 +539,23 @@
   thread->mcontext.fpc_eir = rawregs->float_save.fir;
 #endif
 }
+#elif defined(__PPC64__)
+  static void
+  ParseThreadRegisters(CrashedProcess::Thread* thread,
+                     const MinidumpMemoryRange& range) {
+  const MDRawContextPPC64* rawregs = range.GetData<MDRawContextPPC64>(0);
+
+  for(int i = 0; i < MD_CONTEXT_PPC64_GPR_COUNT; i++)
+  thread->regs.gpr[i] = rawregs->gpr[i];
+
+  thread->regs.nip = rawregs->srr0;
+  thread->regs.msr = rawregs->srr1;
+  thread->regs.ctr = rawregs->ctr;
+  thread->regs.xer = rawregs->xer;
+  thread->regs.link =  rawregs->lr;
+  thread->regs.ccr = rawregs->cr;
+
+}
 #else
 #error "This code has not been ported to your platform yet"
 #endif
@@ -622,6 +645,14 @@
 # else
 #  error "This mips ABI is currently not supported (n32)"
 # endif
+#elif defined(__PPC64__)
+  if (sysinfo->processor_architecture != MD_CPU_ARCHITECTURE_PPC) {
+    fprintf(stderr,
+            "This version of minidump-2-core only supports PowerPC (64bit)%s.\n",
+            sysinfo->processor_architecture == MD_CPU_ARCHITECTURE_PPC ?
+           ",\nbut the minidump file is from a 32bit machine" : "");
+    _exit(1);
+  }
 #else
 #error "This code has not been ported to your platform yet"
 #endif
@@ -926,6 +957,8 @@
   pr.pr_pid = thread.tid;
 #if defined(__mips__)
   memcpy(&pr.pr_reg, &thread.mcontext.gregs, sizeof(user_regs_struct));
+#elif defined(__PPC__)
+  memcpy(&pr.pr_reg, &thread.regs, sizeof(pt_regs));
 #else
   memcpy(&pr.pr_reg, &thread.regs, sizeof(user_regs_struct));
 #endif
